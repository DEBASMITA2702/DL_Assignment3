import torch

def calculate(modelEval, outputSequence, paddingIndex, lossFunction):
    '''
        Parameters:
            modelEval : output from the model
            outputSequence : original word in the dataset
            paddingIndex : encoding of the padding characters in the vocabulary
            lossFunction : loss function used in the model
        Returns :
            modelEval : updated output to be used in the next batch of data
            correctPredictions : number of words predicted correctly
            totalLoss : loss generated by the current batch
        Function:
            Calculates number of correct predictions and loss for the data passed
    '''

    '''calculate correct predictions'''
    dim = modelEval.shape[2]
    predictedSequence = modelEval.argmax(dim=2)
    acuurate = (predictedSequence == outputSequence) + (outputSequence == paddingIndex)
    acuurate = torch.clamp(acuurate, max=1)
    acuurateAlongOneColumn = acuurate.all(dim=0)
    total = acuurateAlongOneColumn.sum()
    correctPredictions = total.item()

    '''calculate loss'''
    modelEvalSplit = modelEval[1:]
    modelEval = modelEvalSplit.reshape(-1, dim)
    bengaliSequenceSplit = outputSequence[1:]
    bengaliSequence = bengaliSequenceSplit.reshape(-1)
    loss = lossFunction(modelEval, bengaliSequence)
    totalLoss = loss.item()

    return modelEval, correctPredictions, totalLoss