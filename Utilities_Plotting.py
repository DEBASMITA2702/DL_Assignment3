import plotly.graph_objects as graphObj
from matplotlib.ticker import NullFormatter, FixedFormatter
from PIL import Image

def plotHtml(df, fileName):
    '''
        Parameters:
            df : the dataframe object on which to plot the image
            fileName : name of the file which is to be saved
        Returns :
            None
        Function:
            Plots and saves the table of predictions
    '''
    columnValues = [df.English, df.Original, df.Predicted, df.Differences]
    head = dict(values=list(df.columns), fill_color='yellow', align='center', font_size=15, height=25)
    value = dict(values=columnValues, fill_color='orange', align='center', font_size=13, height=25)
    columns = dict(l=0, r=0, b=0, t=0)
    table = graphObj.Table(header=head, cells=value)
    plot = graphObj.Figure(data=[table])
    plot.update_layout(autosize=False, width=650, height=500, margin=columns)
    plot.write_html(fileName)


def plotHtmlComparison(df, fileName):
    '''
        Parameters:
            df : the dataframe object on which to plot the image
            fileName : name of the file which is to be saved
        Returns :
            image : the image which is plotted
        Function:
            Saves the table of predictions
    '''
    columnValues = [df.English, df.Original, df.Seq2Seq, df.Attention, df.Differences_Seq2Seq, df.Differences_Attention]
    head = dict(values=list(df.columns), fill_color='yellow', align='center', font_size=15, height=25)
    value = dict(values=columnValues, fill_color='orange', align='center', font_size=13, height=25)
    columns = dict(l=0, r=0, b=0, t=0)
    table = graphObj.Table(header=head, cells=value)
    plot = graphObj.Figure(data=[table])
    plot.update_layout(autosize=False, width=1000, height=500, margin=columns)
    plot.write_html(fileName)
    image = Image.open("AttentionVsSeq2Seq.png")
    return image


def createXandYticks(bengaliLength, englishLength, vocabulary, attentionSequence, inputSequence, row):
    '''
        Parameters:
            bengaliLength : length of the target word
            englishLength : length of the source word
            vocabulary : vocabulary of the dataset
            attentionSequence : word generated by the attention model
            inputSequence : original source sequence
            row : row of the grid to plot
        Returns :
            xticklabels : labels of character of the target word
            yticklabels : labels of character of the source word
        Function:
            Creates the labels for the plot
    '''

    '''target words'''
    xticklabels = []
    for column in range(bengaliLength):
        value = attentionSequence[row][column]
        value = value.item()
        label = vocabulary.indexToCharDictForBengali[value]
        xticklabels.append(label)
    
    '''source words'''
    yticklabels = []
    for column in range(englishLength):
        value = inputSequence[row][column]
        value = value.item()
        label = vocabulary.indexToCharDictForEnglish[value]
        yticklabels.append(label)
    
    return xticklabels, yticklabels


def getNullObject():
    '''
        Parameters:
           None
        Returns :
            an object of nullformatter
        Function:
            Creates the null formatter object
    '''
    return NullFormatter()


def getFormatObject(value):
    '''
        Parameters:
            value : value to create the fixed formatter on
        Returns :
            an object of fixedformatter
        Function:
            Creates the fixed formatter object
    '''
    return FixedFormatter(value)